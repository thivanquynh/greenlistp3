package org.greenlist.entity;
// Generated 28 avr. 2017 10:03:43 by Hibernate Tools 4.3.1

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Ticket generated by hbm2java
 */
@Entity
@Table(name = "ticket", catalog = "projet3")
public class Ticket implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private int id;
	private Admin admin;
	private Message message;
	private Motifticket motifticket;
	private Objet objet;
	private Souhait souhait;
	private Typeticket typeticket;
	private Utilisateur utilisateurByIdutilisateurremonte;
	private Utilisateur utilisateurByIdutilisateursignale;
	private String description;
	private Date dateemission;
	private Date datecloture;
	private List<Message> messages = new ArrayList<>();

	public Ticket() {
	}

	public Ticket(int id, Motifticket motifticket, Typeticket typeticket, Utilisateur utilisateurByIdutilisateurremonte,
			String description, Date dateemission) {
		this.id = id;
		this.motifticket = motifticket;
		this.typeticket = typeticket;
		this.utilisateurByIdutilisateurremonte = utilisateurByIdutilisateurremonte;
		this.description = description;
		this.dateemission = dateemission;
	}

	public Ticket(int id, Admin admin, Message message, Motifticket motifticket, Objet objet, Souhait souhait,
			Typeticket typeticket, Utilisateur utilisateurByIdutilisateurremonte,
			Utilisateur utilisateurByIdutilisateursignale, String description, Date dateemission, Date datecloture,
			List<Message> messages) {
		this.id = id;
		this.admin = admin;
		this.message = message;
		this.motifticket = motifticket;
		this.objet = objet;
		this.souhait = souhait;
		this.typeticket = typeticket;
		this.utilisateurByIdutilisateurremonte = utilisateurByIdutilisateurremonte;
		this.utilisateurByIdutilisateursignale = utilisateurByIdutilisateursignale;
		this.description = description;
		this.dateemission = dateemission;
		this.datecloture = datecloture;
		this.messages = messages;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDADMINISTRATEUR")
	public Admin getAdmin() {
		return this.admin;
	}

	public void setAdmin(Admin admin) {
		this.admin = admin;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDMESSAGE")
	public Message getMessage() {
		return this.message;
	}

	public void setMessage(Message message) {
		this.message = message;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDMOTIF", nullable = false)
	public Motifticket getMotifticket() {
		return this.motifticket;
	}

	public void setMotifticket(Motifticket motifticket) {
		this.motifticket = motifticket;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDOBJET")
	public Objet getObjet() {
		return this.objet;
	}

	public void setObjet(Objet objet) {
		this.objet = objet;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDSOUHAIT")
	public Souhait getSouhait() {
		return this.souhait;
	}

	public void setSouhait(Souhait souhait) {
		this.souhait = souhait;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDTYPE", nullable = false)
	public Typeticket getTypeticket() {
		return this.typeticket;
	}

	public void setTypeticket(Typeticket typeticket) {
		this.typeticket = typeticket;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDUTILISATEURREMONTE", nullable = false)
	public Utilisateur getUtilisateurByIdutilisateurremonte() {
		return this.utilisateurByIdutilisateurremonte;
	}

	public void setUtilisateurByIdutilisateurremonte(Utilisateur utilisateurByIdutilisateurremonte) {
		this.utilisateurByIdutilisateurremonte = utilisateurByIdutilisateurremonte;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDUTILISATEURSIGNALE")
	public Utilisateur getUtilisateurByIdutilisateursignale() {
		return this.utilisateurByIdutilisateursignale;
	}

	public void setUtilisateurByIdutilisateursignale(Utilisateur utilisateurByIdutilisateursignale) {
		this.utilisateurByIdutilisateursignale = utilisateurByIdutilisateursignale;
	}

	@Column(name = "DESCRIPTION", nullable = false, length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATEEMISSION", nullable = false, length = 19)
	public Date getDateemission() {
		return this.dateemission;
	}

	public void setDateemission(Date dateemission) {
		this.dateemission = dateemission;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATECLOTURE", length = 19)
	public Date getDatecloture() {
		return this.datecloture;
	}

	public void setDatecloture(Date datecloture) {
		this.datecloture = datecloture;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "ticket")
	public List<Message> getMessages() {
		return this.messages;
	}

	public void setMessages(List<Message> messages) {
		this.messages = messages;
	}

}
